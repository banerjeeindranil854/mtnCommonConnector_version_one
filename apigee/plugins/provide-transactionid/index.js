'use strict';

/*
 * Name: provide-transactionid
 * Descrip: Custom plugin to inject as transactionId header if not presented.
 *      Uses the correlationId as generated by the microgateway for every request.
 *      This same correlationId is used as the "i=" parameter to identify each entry in the logger routine.
 *
 *
 * Config stanza:
 *  activate: Toggle provide-transactionid functionality
 *    example: true
 *
 *  prefix
 *  4-digit prefix to the correlationId
 *  Example: "emg-"   
 *
 */


module.exports.init = function(config, logger, stats) {

	//== Initialisation (for each worker thread started )
  var plugId = "-- PT: ";
	var idMsg = plugId + ' Provide-TransactionId';
	
	var idPrefix;
	if (config.activate) {
		idMsg += " initialised and active";
		idPrefix = config.prefix ? config.prefix : "emg-";
		idMsg += ". prefix is " + idPrefix;
	} else {
		idMsg += ' present but inactive.';
	}
	console.log(idMsg);
	
	//== Check if crypto support is in NodeJS core - in case need to generate a GUID
	// The fastest possible way to create random 32-char string in Node is by using native crypto module:
	//  const id = crypto.randomBytes(16).toString("hex");	
	//let crypto;
	//try {
	//  crypto = require('crypto');
	//  console.log(plugId + 'Supported crypto hashes :' + crypto.getHashes() );
	//
	//} catch (err) {
	//  console.log(plugId +'crypto support is disabled!');
	//}

	//== On traffic ...
	return {
	  
		onrequest: function(req, res, next) {

			if (config.activate) {
				if (!req.headers['transactionId']) {
					try {
						req.headers['transactionId'] = idPrefix + req.correlationId;
					} catch (e) {}					
				}
			}

			//== Traffic must flow to next (plugin)
			next();

		}
	
	};

}
